----------------------------------------------------------------
K extends keyof T 
The keyof operator takes an object type and produces a string or numeric literal union of its keys:

	T = Student = {
    	Name: string,
    	Surname: string,
    	Grades: Grades[],
    	StudentNumber: number
	}
	K = 'Name' | 'Surname' | 'Grades' | 'StudentNumber'

----------------------------------------------------------------

----------------------------------------------------------------
Omit<T, K>
Constructs a type by picking all properties from T and then removing K (string literal or union of string literals).
	T = Student = {
    	Name: string,
    	Surname: string,
    	Grades: Grades[],
    	StudentNumber: number
	}
	K = 'Name' | 'Surname'

	=> Omit<T, K> = {
		Grades: Grades[],
		StudentNumber: number
	} 

----------------------------------------------------------------


----------------------------------------------------------------
Pick<T, K>
Constructs a T by picking the set of properties K (string literal or union of string literals) from Type.
	T = Student = {
    	Name: string,
    	Surname: string,
    	Grades: Grades[],
    	StudentNumber: number
	}
	K = 'Name' | 'StudentNumber'

	=> Pick<T, K> = {
		Name: string,
		StudentNumber: number
	}
----------------------------------------------------------------

----------------------------------------------------------------
T & R
interfaces allowed us to build up new types from other types by extending them. TypeScript provides another construct called intersection types that is mainly used to combine existing object types.
	T = {
		Color: string
	}
	R = {
		Length: number
	}

	=> T & R = {
		Color: string
		Length: number
	}
----------------------------------------------------------------
